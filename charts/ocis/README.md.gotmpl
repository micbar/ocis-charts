
[comment]: # (DONT EDIT THE README FILE directly, it is autogenerated. Instead you need to edit this README.md.gotmpl file)

# {{ template "chart.description" . }}
{{ template "chart.badgesSection" . }}

{{ template "chart.deprecationWarning" . }}

## Requirements and Limitations

### Infinite Scale (oCIS)

See the [ownCloud Infinite Scale](https://doc.owncloud.com/ocis/next/) documentation for oCIS installation details.

### Kubernetes

Following Kubernetes versions with their patch releases are currently supported. ownCloud is not testing the Helm chart on all Kubernetes versions, but ensures API compatibility by running manifest validation for the supported versions.

* {{ template "chart.kubeVersion" . }}

{{/* This Helm chart is using following external Helm charts: */}}

{{/* template "chart.requirementsTable" . */}}

### Supported oCIS Version for This Helm Chart

Note that this chart is only supported using the following oCIS version:

* 2.0.0-beta.4

### Upgrading an Existing Chart to a New Major Version

A major chart version change (like v1.2.3 -> v2.0.0) indicates that there is an incompatible breaking change which needs manual actions.

### Helm Chart Repository

This chart is still in an experimental phase and it has not yet been published on a Helm chart repository.

## Installing the Chart

To install the chart with the release name `my-release`:

* Clone this git repository
* Run `helm install my-release ./charts/ocis` from the root of this git repository

### minikube

1. Start your minikube cluster:

    ```console
    minikube start
    ```

1. Enable the minikube ingress plugin:

    ```console
    minikube addons enable ingress
    ```

1. Create a `values.yaml` with following contents:

    ```yaml
    externalDomain: ocis.kube.owncloud.test
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      tls:
      - hosts:
        - ocis.kube.owncloud.test
    insecure:
      # disables ssl certificate checking for connections to the openID connect identity provider. Not recommended for production setups, but we don't have valid certificates in minikube
      oidcIdpInsecure: true
      # disables ssl certificate checking for connections to the oCIS http apis. Not recommended for production setups, but we don't have valid certificates in minikube
      ocisHttpApiInsecure: true
    ```

1. Create all secrets as described in the [Secrets](#secrets) section

1. Install the with the values file applied

    ```console
    helm install ocis ./charts/ocis --values values.yaml
    ```

1. Get the minikube IP address

    ```console
    minikube ip
    ```

1. add the minikube IP address to your `/etc/hosts` file or use the [Ingress DNS addon](https://minikube.sigs.k8s.io/docs/handbook/addons/ingress-dns/).
  An example line for the `/etc/hosts` file could look like this:

    ```bash
    192.168.49.2 ocis.kube.owncloud.test
    ```

1. use oCIS in your browser on https://ocis.kube.owncloud.test.

## Uninstalling the Chart

To uninstall/delete the my-release deployment:

```console
helm delete my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

## Configuration

{{ template "chart.valuesTable" . }}

### Secrets

oCIS needs some secrets to work. We decided against creating them automagically for you, because Helm does not support one-off generation of secrets out of the box. Also oCIS needs to have some certificates, which should have an expiry and therefore need a certificate rotation from time to time. This is also not supported by Helm.

These reasons add up and as a result, the responsibility for these secrets and there lifecycle lies at the operator, which means you.

We will give you all information you need to generate and maintain these secrets.

Following example shows you how the secrets need to look like and how you can generate them. The example assumes, that you don't change the `secretRefs`. Each secret data entry holds a description on how to generate it or find the right value.

You can apply the secrets manually or include them in the `extraResources`.

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  jwt-secret: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-bind-secrets
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  reva-ldap-bind-password: XXXXXXXXXXXXX

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  idp-ldap-bind-password: XXXXXXXXXXXXX

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  graph-ldap-bind-password: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-ca
type: Opaque
data:
  # how to generate: base64 encode the pem-encoded certificate of a (self-signed) x509 certificate authority
  # example generation commands:
  #  - `openssl genrsa -out ldap-ca.key 4096`
  #  - `openssl req -new -x509 -days 3650 -key ldap-ca.key -out ldap-ca.crt`
  #  - `cat ldap-ca.crt | base64 | tr -d '\n' && echo`
  ldap-ca.crt: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-cert
type: Opaque
data:
  # how to generate: base64 encode a private key (eg. ed25519, ensure that you use reasonable long key size)
  # example generation commands:
  #  - `openssl genrsa -out ldap.key 4096`
  #  - `cat ldap.key | base64 | tr -d '\n' && echo`
  ldap.key: XXXXXXXXXXXXX

  # how to generate: base64 encode a x509 certificate signed by the above CA, using the above private key.
  # example generation commands:
  #  - `openssl req -new -subj "/CN=idm" -key ldap.key -out ldap.csr`
  #  - `openssl x509 -req -extensions SAN -extfile <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:idm")) -days 365 -in ldap.csr -CA ldap-ca.crt -CAkey ldap-ca.key -out ldap.crt -CAcreateserial`
  #  - `cat ldap.crt | base64 | tr -d '\n' && echo`
  ldap.crt: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: machine-auth-api-key
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  machine-auth-api-key: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: storage-system
type: Opaque
data:
  # how to generate: base64 encode a UUID V4
  # example generation command: `cat /proc/sys/kernel/random/uuid | tr -d '\n' | base64`
  user-id: XXXXXXXXXXXXX

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  api-key: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: storage-system-jwt-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  storage-system-jwt-secret: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: transfer-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  transfer-secret: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user
type: Opaque
data:
  # how to generate: base64 encode a UUID V4
  # example generation command: `cat /proc/sys/kernel/random/uuid | tr -d '\n' | base64`
  user-id: XXXXXXXXXXXXX

  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[a-zA-Z0-9],.' < /dev/urandom | fold -w 50 | head -n 1 | tr -d '\n' | base64`
  password: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: idp-secrets
type: Opaque
data:
  # how to generate: base64 encode a random 32 byte string (mixed characters)
  # example generation command: `openssl rand 32 | base64`
  encryption.key: XXXXXXXXXXXXX

  # how to generate: base64 encode a private key (eg. RSA, ensure that you use reasonable long key size)
  # example generation command: `openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 2> /dev/null | base64 | tr -d '\n'`
  private-key.pem: XXXXXXXXXXXXX

---
apiVersion: v1
kind: Secret
metadata:
  name: thumbnails-transfer-secret
type: Opaque
data:
  # how to generate: base64 encode a random string (reasonable long and mixed characters)
  # example generation command: `tr -cd '[:alnum:],.' < /dev/urandom | fold -w 50 | head -n 1 | base64`
  thumbnails-transfer-secret: XXXXXXXXXXXXX
```

If you set `features.emailNotifications` to `true` you also need to configure a SMTP email server secret:

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: notifications-smtp-secret
type: Opaque
data:
  # Sender of emails that will be sent. Example: noreply@owncloud.test
  smtp-sender: XXXXXXXXXXXXX
  # SMTP host to connect to. Example: smtp.owncloud.test
  smtp-host: XXXXXXXXXXXXX
  # Port of the SMTP host to connect to. Example: 1025
  smtp-port: 1025
  # Password of the SMTP host to connect to.
  smtp-password: XXXXXXXXXXXXX

```

### Example With NGINX Ingress and Certificate Issued by cert-manager

To make this work, you need to have NGINX ingress and cert-manager installed in your cluster.

```yaml
  externalDomain: ocis.owncloud.test

  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/issuer: "ocis-certificate-issuer"
    tls:
      - hosts:
        - ocis.owncloud.test
        secretName: ocis-tls-certificate

  extraResources:
    - |
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: ocis-certificate-issuer
        namespace: ocis-namespace
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: test@example.test
          privateKeySecretRef:
            name: ocis-certificate-issuer
          solvers:
          - http01:
              ingress:
                class: nginx
```
