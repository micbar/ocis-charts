{{- $_ := set . "appName" "storage-users" -}}
{{- $_ := set . "resources" (default (default (dict) .Values.resources) .Values.services.storageUsers.resources) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .appName }}
  namespace: {{ template "ocis.namespace" . }}
  labels:
    {{- include "ocis.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: {{ .appName }}
  {{- if and (not .Values.autoscaling.enabled) (.Values.replicas) }}
  replicas: {{ .Values.replicas }}
  {{- end }}
  {{- if .Values.deploymentStrategy }}
  strategy: {{ toYaml .Values.deploymentStrategy | nindent 4 }}
  {{ end }}
  template:
    metadata:
      labels:
        app: {{ .appName }}
        {{- include "ocis.labels" . | nindent 8 }}
    spec:
      securityContext:
          fsGroup: {{ .Values.securityContext.fsGroup }}
          fsGroupChangePolicy: {{ .Values.securityContext.fsGroupChangePolicy }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- if and $.Values.services.storageUsers.persistence.enabled $.Values.services.storageUsers.persistence.chownInitContainer }}
      initContainers:
        - name: init-chown-data
          image: busybox
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command: ["chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }}", "/var/lib/ocis"]
          volumeMounts:
          - name: storage-users-data
            mountPath: /var/lib/ocis
      {{ end }}
      containers:
        - name: {{ .appName }}
          image: {{ template "ocis.image" $ }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["ocis"]
          args: ["storage-users", "server"]
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
            readOnlyRootFilesystem: false
          env:
            - name: MICRO_REGISTRY
              value: kubernetes

            # logging
            - name: STORAGE_USERS_LOG_COLOR
              value: {{ .Values.logging.color | quote }}
            - name: STORAGE_USERS_LOG_LEVEL
              value: {{ .Values.logging.level | quote }}
            - name: STORAGE_USERS_LOG_PRETTY
              value: {{ .Values.logging.pretty | quote }}

            - name: STORAGE_USERS_DEBUG_PPROF
              value: {{ .Values.debug.profiling | quote }}

            # bind config
            - name: STORAGE_USERS_GRPC_ADDR
              value: 0.0.0.0:9157
            - name: STORAGE_USERS_DEBUG_ADDR
              value: 0.0.0.0:9159

            # external availability data gateway
            - name: STORAGE_USERS_HTTP_ADDR
              value: 0.0.0.0:9158
            - name: STORAGE_USERS_DATA_SERVER_URL
              value: "http://storage-users:9158/data"

            - name: STORAGE_USERS_PERMISSION_ENDPOINT
              value: settings:9191

            - name: STORAGE_USERS_OCIS_METADATA_BACKEND
              value: messagepack

            - name: STORAGE_USERS_S3NG_METADATA_BACKEND
              value: messagepack

            # oCIS storage driver (decomposed filesystem)
            {{- if  eq .Values.services.storageUsers.storageBackend.driver "ocis" }}
            - name: STORAGE_USERS_DRIVER
              value: ocis
            {{- end }}

            # S3ng storage driver (decomposed filesystem)
            {{- if  eq .Values.services.storageUsers.storageBackend.driver "s3ng" }}
            - name: STORAGE_USERS_DRIVER
              value: s3ng
            - name: STORAGE_USERS_S3NG_ENDPOINT
              value: {{ .Values.services.storageUsers.storageBackend.driverConfig.s3ng.endpoint | quote }}
            - name: STORAGE_USERS_S3NG_REGION
              value: {{ .Values.services.storageUsers.storageBackend.driverConfig.s3ng.region | quote }}
            - name: STORAGE_USERS_S3NG_ACCESS_KEY
              value: {{ .Values.services.storageUsers.storageBackend.driverConfig.s3ng.accessKey | quote }}
            - name: STORAGE_USERS_S3NG_SECRET_KEY
              value: {{ .Values.services.storageUsers.storageBackend.driverConfig.s3ng.secretKey | quote }}
            - name: STORAGE_USERS_S3NG_BUCKET
              value: {{ .Values.services.storageUsers.storageBackend.driverConfig.s3ng.bucket | quote }}
            {{- end }}

            # events
            - name: STORAGE_USERS_EVENTS_ENDPOINT
            {{- if not .Values.messagingSystem.external.enabled }}
              value: nats:9233
            {{- else }}
              value: {{ .Values.messagingSystem.external.endpoint | quote }}
            - name: STORAGE_USERS_EVENTS_CLUSTER
              value: {{ .Values.messagingSystem.external.cluster | quote }}
            - name: STORAGE_USERS_EVENTS_ENABLE_TLS
              value: {{ .Values.messagingSystem.external.tls.enabled | quote }}
            - name: STORAGE_USERS_EVENTS_TLS_INSECURE
              value: {{ .Values.messagingSystem.external.tls.insecure | quote }}
            - name: STORAGE_USERS_EVENTS_TLS_ROOT_CA_CERTIFICATE
              {{- if not .Values.messagingSystem.external.tls.certTrusted }}
              value: /etc/ocis/messaging-system-ca/messaging-system-ca.crt
              {{- else }}
              value: "" # no cert needed
              {{- end }}
            {{- end }}

            - name: REVA_GATEWAY
              value: gateway:9142

            # cache
            - name: STORAGE_USERS_CACHE_STORE
              value: {{ .Values.cache.type | quote }}
            {{- if ne .Values.cache.type "noop" }}
            - name: STORAGE_USERS_CACHE_NODES
              value: {{ join "," .Values.cache.nodes | quote }}
            {{- end }}

            - name: STORAGE_USERS_MOUNT_ID
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configRefs.storageUsersConfigRef }}
                  key: storage-uuid

            - name: STORAGE_USERS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretRefs.jwtSecretRef }}
                  key: jwt-secret

            - name: STORAGE_TRANSFER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretRefs.transferSecretSecretRef }}
                  key: transfer-secret

          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics-debug
            timeoutSeconds: 10
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 3

          resources: {{ toYaml .resources | nindent 12 }}

          ports:
            - name: grpc
              containerPort: 9157
            - name: http
              containerPort: 9158
            - name: metrics-debug
              containerPort: 9159

          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: ocis-config-tmp
              mountPath: /etc/ocis # we mount that volume only to apply fsGroup to that path
            - name: messaging-system-ca
              mountPath: /etc/ocis/messaging-system-ca
              readOnly: true
            - name: storage-users-data
              mountPath: /var/lib/ocis

      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: ocis-config-tmp
          emptyDir: {}
        - name: messaging-system-ca
          {{ if and (.Values.messagingSystem.external.enabled) (not .Values.messagingSystem.external.tls.certTrusted) }}
          secret:
            secretName: {{ .Values.secretRefs.messagingSystemCaRef }}
          {{ else }}
          emptyDir: {}
          {{ end }}
        - name: storage-users-data
          {{ if .Values.services.storageUsers.persistence.enabled }}
          persistentVolumeClaim:
            claimName: storage-users-data
          {{ else }}
          emptyDir: {}
          {{ end }}
